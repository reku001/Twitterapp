package jp.nadai.twitterapplication;

import java.util.List;

import jp.nadai.twitterapplication.model.DMline;
import twitter4j.DirectMessage;
import twitter4j.ResponseList;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import android.app.ListActivity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Toast;

public class DirectMessageActivity extends ListActivity {

	private DMline mAdapter;
    private Twitter mTwitter;;

    private static final int MENU_ID_A = 0;
    private static final int MENU_ID_B = 1;
    private static final int MENU_ID_C = 2;
    private static final int MENU_ID_D = 3;


	 @Override
	    protected void onCreate(Bundle savedInstanceState) {
	        super.onCreate(savedInstanceState);
	        //setContentView(R.layout.activity_direct_message);

	        if (!TwitterUtils.hasAccessToken(this)) {
	            Intent intent = new Intent(this, TwitterOAuthActivity.class);
	            startActivity(intent);
	            finish();
	        } else {
	        	 mAdapter = new DMline(this);
	            setListAdapter(mAdapter);

	            mTwitter = TwitterUtils.getTwitterInstance(this);
	            reloadDirectMessages();
	        }
	       
	        
         }

	 

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.direct_message, menu);

		  menu.add(Menu.NONE, MENU_ID_A, Menu.NONE, "投稿");
	      menu.add(Menu.NONE, MENU_ID_B, Menu.NONE, "ホーム");
	      menu.add(Menu.NONE, MENU_ID_C, Menu.NONE, "リプライ");
	      menu.add(Menu.NONE, MENU_ID_D, Menu.NONE, "検索");


		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.

		switch (item.getItemId()) {
//		case MENU_ID_A:
//			Intent intent = new Intent(DirectMessageActivity.this, SubActivity.class);
//			startActivity(intent);
//			return true;

		case MENU_ID_B:
			Intent intent1 = new Intent(DirectMessageActivity.this, HomeActivity.class);
			startActivity(intent1);
			return true;

		case MENU_ID_C:
			Intent intent2 = new Intent(DirectMessageActivity.this, ReplyActivity.class);
			startActivity(intent2);
			return true;

		case MENU_ID_D:
			Intent intent3 = new Intent(DirectMessageActivity.this, SearchActivity.class);
			startActivity(intent3);
			return true;
////マニフェストファイルへの宣言を書いてないので、忘れずに。

		}

		return super.onOptionsItemSelected(item);
	}


	private void reloadDirectMessages() {
	    AsyncTask<Void, Void, List<twitter4j.DirectMessage>> task = new AsyncTask<Void, Void, List<twitter4j.DirectMessage>>() {
	        @Override
	        protected ResponseList<DirectMessage> doInBackground(Void... params) {
	            try {
	            	ResponseList<DirectMessage> temp = mTwitter.getDirectMessages();
	                return mTwitter.getDirectMessages();
	            } catch (TwitterException e) {
	                e.printStackTrace();
	            }
	            return null;
	        }

	        @Override
	        protected void onPostExecute(List<twitter4j.DirectMessage> result) {
	            if (result != null) {
	            	 mAdapter.clear();
	                Log.d("dm",result.toString());
	                for (twitter4j.DirectMessage dm : result) {
	                	 mAdapter.add(dm);
	                }
	                getListView().setSelection(0);
	            } else {
	                showToast("DMの取得に失敗しました。。。");
	            }
	        }
	    };
	    task.execute();
	}

	private void showToast(String text) {
	    Toast.makeText(this, text, Toast.LENGTH_SHORT).show();
	}

}
